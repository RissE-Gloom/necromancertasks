import { Telegraf } from 'telegraf';
import { KanbanWebSocketServer } from './websocket.js';

export class KanbanBot {
    #bot = null;
    #wsServer = null;
    #pendingStatusRequests = new Map();

    constructor() {
        this.#bot = new Telegraf(process.env.BOT_TOKEN);
        this.#wsServer = new KanbanWebSocketServer(this.#bot);
        this.#setupCommands();
        this.#setupCallbacks();
        this.#setupErrorHandling();
    }

    #setupCommands() {
    this.#bot.command('start', (ctx) => this.#handleStart(ctx));
    this.#bot.command('status', (ctx) => this.#handleStatus(ctx));
    this.#bot.command('help', (ctx) => this.#handleHelp(ctx));
    this.#bot.command('connections', (ctx) => this.#handleConnections(ctx));
    this.#bot.command('chatid', (ctx) => this.#handleChatId(ctx)); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É
}


handleStatusResponseReceived(chatId) {
        if (this.#pendingStatusRequests.has(chatId)) {
            console.log('‚úÖ Status response received for chat:', chatId);
            this.#pendingStatusRequests.delete(chatId);
        }
    }

#handleChatId = (ctx) => {
    ctx.reply(`üÜî –í–∞—à Chat ID: ${ctx.chat.id}\n\n–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –≤ .env —Ñ–∞–π–ª –∫–∞–∫ CHAT_ID=${ctx.chat.id}`);
}

    #handleSetNotifications = (ctx) => {
        this.#wsServer.setNotificationChatId(ctx.chat.id);
        ctx.reply('‚úÖ –≠—Ç–æ—Ç —á–∞—Ç —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö Kanban –¥–æ—Å–∫–∏');
    }

    #setupCallbacks() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        this.#bot.on('callback_query', (ctx) => {
            const callbackData = ctx.callbackQuery.data;
            
            if (callbackData === 'status_all') {
                this.#handleStatusAll(ctx);
            } else if (callbackData.startsWith('status_column_')) {
                const columnStatus = callbackData.replace('status_column_', '');
                this.#handleColumnStatus(ctx, columnStatus);
            }
            
            // –û—Ç–≤–µ—Ç–∏–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
            ctx.answerCbQuery();
        });
    }

    #handleStart = (ctx) => {
        const welcomeMessage = `
üéØ *Kanban Tracker Bot*

–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –≤–∞—à–µ–π Kanban –¥–æ—Å–∫–µ –∏ –ø—Ä–∏—Å—ã–ª–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/status - –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
/connections - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö
/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
‚Ä¢ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏  
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á (3 –¥–Ω—è –≤ "Done")
        `;

        ctx.reply(welcomeMessage, { parse_mode: 'Markdown' });
    }

    #handleStatus = async (ctx) => {
        try {
            const clientCount = this.#wsServer.getClientCount();
            
            // if (clientCount === 0) {
            //     ctx.reply('‚ùå *–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö Kanban –¥–æ—Å–æ–∫*\n\n–û—Ç–∫—Ä–æ–π—Ç–µ Kanban –¥–æ—Å–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.', {
            //         parse_mode: 'Markdown'
            //     });
            //     return;
            // }

            // const message = await ctx.reply('üîÑ *–ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫...*', {
            //     parse_mode: 'Markdown'
            // });

            // this.#pendingStatusRequests.set(ctx.chat.id, message.message_id);

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            this.#wsServer.requestStatus(ctx.chat.id);

            // –¢–∞–π–º–∞—É—Ç –Ω–∞ –æ—Ç–≤–µ—Ç
            setTimeout(() => {
                if (this.#pendingStatusRequests.has(ctx.chat.id)) {
                    ctx.telegram.editMessageText(
                        ctx.chat.id,
                        message.message_id,
                        null,
                        '‚è∞ *–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Kanban –¥–æ—Å–∫–∏*\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –¥–æ—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.',
                        { parse_mode: 'Markdown' }
                    ).catch(console.error);
                    
                    this.#pendingStatusRequests.delete(ctx.chat.id);
                }
            }, 5000);

        } catch (error) {
            console.error('Status command error:', error);
            ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞');
        }
    }

    #handleStatusAll = (ctx) => {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        this.#wsServer.requestStatus(ctx.chat.id);
    }

    #handleColumnStatus = (ctx, columnStatus) => {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
        this.#wsServer.requestColumnStatus(ctx.chat.id, columnStatus);
    }

    #handleConnections = (ctx) => {
        const clientCount = this.#wsServer.getClientCount();
        const status = clientCount > 0 ? '‚úÖ' : '‚ùå';
        
        ctx.reply(
            `${status} *–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*\n\n` +
            `‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –¥–æ—Å–æ–∫: ${clientCount}\n` +
            `‚Ä¢ WebSocket –ø–æ—Ä—Ç: 8080\n` +
            `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${clientCount > 0 ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π'}`,
            { parse_mode: 'Markdown' }
        );
    }

    #handleHelp = (ctx) => {
        const helpMessage = `
üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/status - –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
/connections - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö  
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
‚Ä¢ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á (3 –¥–Ω—è –≤ "Done")
        `;

        ctx.reply(helpMessage, { parse_mode: 'Markdown' });
    }

    #setupErrorHandling() {
        this.#bot.catch((error, ctx) => {
            console.error('Bot error:', error);
            ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã');
        });
    }

    startWebSocket(port = 8080) {
        this.#wsServer.start(port);
        return this;
    }

    launch() {
        this.#bot.launch();
        console.log('ü§ñ Telegram bot started');
        return this;
    }

    stop() {
        this.#bot.stop();
        this.#wsServer.stop();
        console.log('üõë Bot stopped');
    }
}