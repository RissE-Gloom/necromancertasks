// Core Kanban Board Application
class KanbanBoard {
  constructor() {
    this.tasks = this.loadTasks()
    this.columns = this.loadColumns()
    this.currentEditingColumn = null
    this.lucide = window.lucide
    this.draggedTask = null
    this.draggedElement = null
    this.ws = null;
    this.retryCount = 0;
    this.maxRetries = 5;
    this.syncPending = false;
    this.pendingSyncRequests = new Map();
    this.clientType = 'browser'; // üëà –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞

    this.init()
  }

  setupWebSocket() {
    try {
        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsPort = window.location.hostname === 'localhost' ? ':8080' : '';
        const isMiniApp = window.Telegram?.WebApp?.initData || window.location.search.includes('miniApp=true');
        
        // üëá –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞
        const wsUrl = `${wsProtocol}//${window.location.hostname}${wsPort}?clientType=${isMiniApp ? 'miniApp' : 'browser'}`;
        
        this.ws = new WebSocket(wsUrl);
        
        this.ws.onopen = () => {
            console.log('‚úÖ Connected to bot server');
            this.retryCount = 0;
            this.ws.send(JSON.stringify({ type: 'PING' }));
            
            // üëá –ï—Å–ª–∏ —ç—Ç–æ Mini App, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            if (isMiniApp) {
                this.requestSync();
            }
        };

        // üëá –£–ª—É—á—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        this.ws.onmessage = (event) => {
            try {
                const message = JSON.parse(event.data);
                console.log('üì® Received from server:', message.type);
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                switch (message.type) {
                    case 'SYNC_DATA':
                        this.handleSyncData(message);
                        break;
                    case 'SYNC_REQUESTED':
                        if (!isMiniApp) { // üëá –¢–æ–ª—å–∫–æ –±—Ä–∞—É–∑–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                            this.handleSyncRequested(message);
                        }
                        break;
                    case 'SYNC_CONFIRMED':
                        this.handleSyncConfirmed(message);
                        break;
                    case 'CONNECTION_ESTABLISHED':
                        console.log('‚úÖ Connection confirmed by server');
                        if (message.clientType) {
                            this.clientType = message.clientType;
                        }
                        break;
                    case 'TASK_MOVED':
                    case 'TASK_CREATED':
                    case 'TASK_UPDATED':
                    case 'TASK_DELETED':
                        if (isMiniApp) { // üëá Mini App –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞
                            this.handleChangeNotification(message);
                        }
                        break;
                    default:
                        this.handleBotMessage(event.data);
                        break;
                }
            } catch (error) {
                console.error('Message processing error:', error);
                this.handleBotMessage(event.data);
            }
        };

        this.ws.onclose = () => {
            console.log('‚ùå WebSocket disconnected');
            this.attemptReconnect();
        };

        this.ws.onerror = (error) => {
            console.error('WebSocket error:', error);
        };

    } catch (error) {
        console.error('WebSocket setup error:', error);
    }
  }

  // üëá –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  handleSyncData(message) {
    if (message.tasks && message.columns) {
        console.log('üîÑ Receiving sync data');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.tasks = message.tasks;
        this.columns = message.columns;
        
        this.saveTasks();
        this.saveColumns();
        this.render();
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏—Å—Ö–æ–¥–∏–ª–æ –æ—Ç –Ω–∞—Å)
        if (message.syncId && !this.pendingSyncRequests.has(message.syncId)) {
            this.sendToBot({
                type: 'SYNC_CONFIRMED',
                syncId: message.syncId,
                timestamp: new Date().toISOString()
            });
        }
    }
  }

  handleSyncRequested(message) {
    console.log('üì¨ Sync requested by Mini App');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.sendSyncData(message.requestId);
  }

  handleSyncConfirmed(message) {
    if (this.pendingSyncRequests.has(message.syncId)) {
        console.log('‚úÖ Sync confirmed:', message.syncId);
        this.pendingSyncRequests.delete(message.syncId);
        this.syncPending = false;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        this.updateSyncButton(false);
    }
  }

  // üëá –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  handleChangeNotification(message) {
    console.log('üìù Processing change notification:', message.type);
    
    switch (message.type) {
        case 'TASK_MOVED':
            this.applyTaskMove(message);
            break;
        case 'TASK_CREATED':
            this.applyTaskCreate(message);
            break;
        case 'TASK_UPDATED':
            this.applyTaskUpdate(message);
            break;
        case 'TASK_DELETED':
            this.applyTaskDelete(message);
            break;
    }
  }

  applyTaskMove(message) {
    const task = this.tasks.find(t => t.id === message.taskId);
    if (task && task.status !== message.toStatus) {
        task.status = message.toStatus;
        this.saveTasks();
        this.render();
    }
  }

  applyTaskCreate(message) {
    const existingTask = this.tasks.find(t => t.id === message.task.id);
    if (!existingTask) {
        this.tasks.push({
            ...message.task,
            createdAt: message.timestamp,
            description: message.task.description || '',
            label: message.task.label || ''
        });
        this.saveTasks();
        this.render();
    }
  }

  applyTaskUpdate(message) {
    const taskIndex = this.tasks.findIndex(t => t.id === message.taskId);
    if (taskIndex !== -1) {
        this.tasks[taskIndex] = { ...this.tasks[taskIndex], ...message.updatedData };
        this.saveTasks();
        this.render();
    }
  }

  applyTaskDelete(message) {
    this.tasks = this.tasks.filter(t => t.id !== message.taskId);
    this.saveTasks();
    this.render();
  }

  sendSyncData(requestId = null) {
    const syncData = {
        type: 'SYNC_DATA',
        syncId: this.generateId(),
        tasks: this.tasks,
        columns: this.columns,
        timestamp: new Date().toISOString()
    };
    
    if (requestId) {
        syncData.requestId = requestId;
    }
    
    this.sendToBot(syncData);
  }

  requestSync() {
    const requestId = this.generateId();
    this.pendingSyncRequests.set(requestId, {
        timestamp: Date.now(),
        status: 'pending'
    });
    
    this.updateSyncButton(true);
    
    this.sendToBot({
        type: 'REQUEST_SYNC',
        requestId: requestId,
        timestamp: new Date().toISOString()
    });
    
    // –¢–∞–π–º–∞—É—Ç –Ω–∞ –æ—Ç–≤–µ—Ç
    setTimeout(() => {
        if (this.pendingSyncRequests.has(requestId)) {
            console.log('‚è∞ Sync request timeout');
            this.pendingSyncRequests.delete(requestId);
            this.updateSyncButton(false);
        }
    }, 5000);
  }

  updateSyncButton(isSyncing) {
    const syncButton = document.getElementById('sync-btn');
    if (syncButton) {
        if (isSyncing) {
            syncButton.innerHTML = '<i data-lucide="loader" class="spin"></i> –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...';
            syncButton.disabled = true;
        } else {
            syncButton.innerHTML = '<i data-lucide="refresh-cw"></i> –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å';
            syncButton.disabled = false;
        }
        if (window.lucide) {
            window.lucide.createIcons();
        }
    }
  }

  // üëá –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  addTask(taskData) {
    const task = {
        id: this.generateId(),
        title: taskData.title,
        description: taskData.description,
        status: taskData.status,
        priority: taskData.priority,
        label: taskData.label || '',
        createdAt: new Date().toISOString(),
    };

    this.tasks.push(task);
    this.saveTasks();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏
    this.sendToBot({
        type: 'TASK_CREATED',
        taskId: task.id,
        status: task.status,
        timestamp: task.createdAt,
        task: {
            id: task.id,
            title: task.title,
            description: task.description,
            priority: task.priority,
            label: task.label
        }
    });
    
    this.render();
  }

  deleteTask(taskId) {
    const task = this.tasks.find(t => t.id === taskId);
    if (task) {
        this.tasks = this.tasks.filter((t) => t.id !== taskId);
        this.saveTasks();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
        this.sendToBot({
            type: 'TASK_DELETED',
            taskId: taskId,
            timestamp: new Date().toISOString()
        });
        
        this.render();
    }
  }

  updateTaskStatus(taskId, newStatus) {
    const task = this.tasks.find(t => t.id === taskId);
    if (!task) return;

    const oldStatus = task.status;
    task.status = newStatus;
    this.saveTasks();
    this.render();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
    if (oldStatus !== newStatus) {
        this.trackTaskMovement(taskId, oldStatus, newStatus);
    }
  }

  // üëá –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º handleEditTask –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  handleEditTask(e) {
    const formData = new FormData(e.target);
    const taskId = formData.get("id");
    const updatedData = {
        title: formData.get("title"),
        description: formData.get("description"),
        priority: formData.get("priority"),
        status: formData.get("status")
    };

    const taskIndex = this.tasks.findIndex(t => t.id === taskId);
    if (taskIndex !== -1) {
        const oldTask = { ...this.tasks[taskIndex] };
        this.tasks[taskIndex] = { ...oldTask, ...updatedData };
        this.saveTasks();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        this.sendToBot({
            type: 'TASK_UPDATED',
            taskId: taskId,
            updatedData: updatedData,
            timestamp: new Date().toISOString()
        });
        
        this.render();
        this.closeModal("edit-task-modal");
    }
  }

  // üëá –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
  addColumn(title) {
    const status = title.toLowerCase().replace(/\s+/g, "-");
    const column = {
      id: status,
      title: title,
      status: status,
    };

    this.columns.push(column);
    this.saveColumns();
    this.render();
    
    // –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
    this.sendSyncData();
  }

  updateColumnTitle(status, newTitle) {
    const column = this.columns.find((c) => c.status === status);
    if (column) {
      column.title = newTitle;
      this.saveColumns();
      this.render();
      
      // –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
      this.sendSyncData();
    }
  }

  deleteColumn(status) {
    if (this.columns.length <= 1) return;

    // Move tasks from deleted column to first available column
    const tasksInColumn = this.getTasksByStatus(status);
    if (tasksInColumn.length > 0) {
      const remainingColumns = this.columns.filter((c) => c.status !== status);
      const targetStatus = remainingColumns[0].status;

      tasksInColumn.forEach((task) => {
        task.status = targetStatus;
      });
      this.saveTasks();
    }

    this.columns = this.columns.filter((c) => c.status !== status);
    this.saveColumns();
    this.render();
    
    // –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
    this.sendSyncData();
  }

  // üëá –£–ª—É—á—à–∞–µ–º trackTaskMovement –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  trackTaskMovement(taskId, fromStatus, toStatus) {
    const task = this.tasks.find(t => t.id === taskId);
    if (!task) return;

    const activity = {
        type: 'TASK_MOVED',
        taskId,
        fromStatus,
        toStatus,
        timestamp: new Date().toISOString(),
        task: {
            id: task.id,
            title: task.title,
            priority: task.priority,
            label: task.label || '',
            description: task.description || ''
        }
    };
    
    console.log('üîÑ Tracking task movement:', activity);
    this.sendToBot(activity);
  }

  // üëá –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º handleEditTask –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  handleEditTask(e) {
    const formData = new FormData(e.target)
    const taskId = formData.get("id")
    const updatedData = {
        title: formData.get("title"),
        description: formData.get("description"),
        priority: formData.get("priority"),
        status: formData.get("status")
    }

    const taskIndex = this.tasks.findIndex(t => t.id === taskId)
    if (taskIndex !== -1) {
        this.tasks[taskIndex] = { ...this.tasks[taskIndex], ...updatedData }
        this.saveTasks()
        
        // üëá –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        this.sendSyncData();
        this.render()
        this.closeModal("edit-task-modal")
    }
  }

  // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
  // ... [–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å] ...

}

// Initialize the application
let kanban
document.addEventListener("DOMContentLoaded", () => {
  kanban = new KanbanBoard()
  
  // üëá –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!document.getElementById('sync-btn')) {
    const syncButton = document.createElement('button');
    syncButton.id = 'sync-btn';
    syncButton.className = 'btn sync-btn';
    syncButton.innerHTML = '<i data-lucide="refresh-cw"></i> –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å';
    syncButton.style.position = 'fixed';
    syncButton.style.bottom = '20px';
    syncButton.style.right = '20px';
    syncButton.style.zIndex = '1000';
    syncButton.onclick = () => kanban.requestSync();
    
    document.body.appendChild(syncButton);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
    setTimeout(() => {
      if (window.lucide) {
        window.lucide.createIcons();
      }
    }, 100);
  }
});
